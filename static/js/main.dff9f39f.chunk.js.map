{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomWord","require","Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","wordRenderer","gens","exactly","totalWordsPerMinute","min","max","join","setState","generator","bind","assertThisInitialized","cnt","type","state","$","keypress","setTimeout","val","document","ready","event","which","keyCode","length","react_default","a","createElement","className","id","onClick","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_Main","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"oRAMIA,SAAaC,EAAQ,KAEJC,cACnB,SAAAA,EAAYC,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACEE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,aAAe,WAEbP,EAAKQ,KAAOZ,EAAW,CAAEa,QAAST,EAAKU,oBAAqBC,IAAK,EAAGC,IAAK,EAAGC,KAAM,MAClFb,EAAKc,SAAS,CAAEC,UAAWf,EAAKQ,QAdhCR,EAAKO,aAAeP,EAAKO,aAAaS,KAAlBf,OAAAgB,EAAA,EAAAhB,CAAAD,IACpBA,EAAKkB,IAAM,EACXlB,EAAKmB,KAAO,GACZnB,EAAKQ,KAAO,GACZR,EAAKU,oBAAsB,IAC3BV,EAAKQ,KAAOZ,EAAW,CAAEa,QAAST,EAAKU,oBAAqBC,IAAK,EAAGC,IAAK,EAAGC,KAAM,MAClFb,EAAKoB,MAAQ,CACXL,UAAWf,EAAKQ,MATpBR,mFAqBEqB,IAAE,qBAAqBC,SAAS,WAE9BC,WAAW,WAETpB,KAAKgB,KAAOE,IAAE,qBAAqBG,OAClC,uCAyBL,OApBAH,IAAEI,UAAUC,MAAM,WAEhBL,IAAE,qBAAqBC,SAAS,SAASK,GAEvCJ,WAAW,WAETpB,KAAKgB,KAAOE,IAAE,qBAAqBG,MAChB,KAAhBG,EAAMC,OAAkC,KAAlBD,EAAME,SACZ,KAAd1B,KAAKgB,MACNhB,KAAKe,OACR,IAEAG,IAAE,cAAcS,OAAS,KAEP,KAAhBH,EAAMC,OAAkC,KAAlBD,EAAME,UAC7B1B,KAAKK,KAAOZ,EAAW,CAAEa,QAASN,KAAKO,oBAAqBC,IAAK,EAAGC,IAAK,EAAGC,KAAM,YAMxFkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,WAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,MAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAObH,EAAAC,EAAAC,cAAA,YAAQ9B,KAAKiB,MAAML,aAGvBgB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACNJ,EAAAC,EAAAC,cAAA,SAAOd,KAAK,SAEZY,EAAAC,EAAAC,cAAA,UAAQE,GAAG,OAAOC,QAAUjC,KAAKI,cAAjC,aAINwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,WACUH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBAAvD,UADV,mBAC4GR,EAAAC,EAAAC,cAAA,KAAGI,KAAK,qBAAqBC,OAAO,SAASC,IAAI,uBAAjD,qBAlFlFC,IAAMC,WCIpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASxB,SAASyB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAc1B,MAAM2B,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dff9f39f.chunk.js","sourcesContent":["import React from 'react'\r\nimport $ from 'jquery'\r\n// import logo from './logo.svg';\r\nimport './assets/css/App.css'\r\n// import WordAnim from 'react-random-word';\r\n\r\nvar randomWord = require('random-words')\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props)\r\n  {\r\n    super(props)\r\n    this.wordRenderer = this.wordRenderer.bind(this)\r\n    this.cnt = 1\r\n    this.type = ''\r\n    this.gens = ''\r\n    this.totalWordsPerMinute = 400\r\n    this.gens = randomWord({ exactly: this.totalWordsPerMinute, min: 1, max: 9, join: ' ' })\r\n    this.state = {\r\n      generator: this.gens\r\n    }\r\n  }\r\n\r\n  wordRenderer = () =>\r\n  {\r\n    this.gens = randomWord({ exactly: this.totalWordsPerMinute, min: 1, max: 9, join: ' ' })\r\n    this.setState({ generator: this.gens })\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    $('#typing-box input').keypress(function()\r\n    {\r\n      setTimeout(function()\r\n      {\r\n        this.type = $('#typing-box input').val()\r\n      }, 70)\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    $(document).ready(function()\r\n    {\r\n      $('#typing-box input').keypress(function(event)\r\n      {\r\n        setTimeout(function()\r\n        {\r\n          this.type = $('#typing-box input').val()\r\n          if(event.which === 32 || event.keyCode === 32)\r\n            if(this.type !== '')\r\n              this.cnt++\r\n        }, 70)\r\n\r\n        if($('.to-type p').length < 14)\r\n        {\r\n          if(event.which === 32 || event.keyCode === 32)\r\n            this.gens = randomWord({ exactly: this.totalWordsPerMinute, min: 1, max: 9, join: ' ' })\r\n        }\r\n      })\r\n    })\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <div className=\"whole-bag-of-jellybean\">\r\n            <div className=\"top-container\">\r\n              <div className=\"options\">\r\n                Options\r\n              </div>\r\n              <div className=\"timer\">0</div>\r\n            </div>\r\n            <div className=\"typing-container\">\r\n              <div className=\"to-type\">\r\n                {/* <WordAnim\r\n                  word={ rando }\r\n                  speed={75}\r\n                  rounds={5}\r\n                  letters=\"0123456789~!@#$%^&*()_+ &nbsp;\"\r\n                /> */}\r\n                <span>{ this.state.generator }</span>\r\n              </div>\r\n            </div>\r\n            <div id=\"typing-box\">\r\n              <input type=\"text\"/>\r\n              {/* <input type=\"text\" disabled placeholder=\"Still under maintenance, stay updated!\" style={{textAlign:'center',textTransform:'uppercase'}}/> */}\r\n              <button id=\"redo\" onClick={ this.wordRenderer }>↻</button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <div className=\"footer\">\r\n          Made by <a href=\"http://github.com/fralyx\" target=\"_blank\" rel=\"noopener noreferrer\">fralyx</a> with ❤ in <a href=\"http://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">React.JS</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}